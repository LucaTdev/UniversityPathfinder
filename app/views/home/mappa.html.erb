<!DOCTYPE html>
<html lang="it">
<head>

<!-- Librerie Leaflet -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: white;
            min-height: 100vh;
            color: #333;
        }

        .container_m {
            max-width: 1450px;
            margin: 0 auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        
        .button-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .button-section h2 {
            margin-bottom: 20px;
            color: #4a5568;
            font-size: 1.5rem;
            text-align: center;
        }

        .button-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
        }

        
        .select {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            height: 70%;
            border: none;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
            position: relative;
            grid-column: span 2;
        }

        .dropdown {
            width: 100%;
            padding: 12px 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
            appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 15px center;
            background-size: 16px;
            padding-right: 45px; 
        }

        .dropdown:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }

        .dropdown:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.3);
        }

        .dropdown option {
            background: white; 
            color: #333;       
            padding: 10px;
        }

        .control-btn, #startInput, #endInput {
            padding: 12px 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        #startInput, #endInput {
            cursor: text;
        }

        #startInput::placeholder, #endInput::placeholder {
            color: rgba(255, 255, 255, 0.8);
        }

        .control-btn:hover, #startInput:focus, #endInput:focus{
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }

        .control-btn:active {
            transform: translateY(0);
        }

        
        .map-directions-wrapper {
            display: flex;
            align-items: stretch;
            flex-direction: row;
            gap: 20px;
            width: 100%;
            align-items: flex-start;
        }
        
        .map-section {
            flex: 2;
            min-height: 400px;
            background: rgba(255, 255, 255, 0.95);
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .map-section h2 {
            margin-bottom: 20px;
            color: #4a5568;
            font-size: 1.5rem;
            text-align: center;
        }

        .map-container {
            width: 100%;
            height: calc(100% - 60px);
            border-radius: 10px;
            min-height: 400px;
            position: relative;
            overflow: visible !important;
        }

        .map-placeholder {
            text-align: center;
            color: #718096;
            font-size: 18px;
        }

        .map-placeholder::before {
            content: "üó∫Ô∏è";
            font-size: 4rem;
            display: block;
            margin-bottom: 15px;
            opacity: 0.6;
        }

        
        .directions-section {
            flex: 1;
            background: rgba(255, 255, 255, 0.95);
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            min-height: 400px;
            max-height: 900px;
            overflow-y: auto;
        }

        .directions-section h2 {
            margin-bottom: 20px;
            color: #4a5568;
            font-size: 1.5rem;
            text-align: center;
        }

        .directions-content {
            background: #f8fafc;
            border-radius: 10px;
            padding: 20px;
            height: calc(100% - 60px);
            overflow-y: auto;
            border: 1px solid #e2e8f0;
        }

        .direction-item {
            padding: 10px 0;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .direction-item:last-child {
            border-bottom: none;
        }

        .direction-icon {
            width: 20px;
            height: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 10px;
        }

        .placeholder-text {
            color: #a0aec0;
            font-style: italic;
            text-align: center;
            margin-top: 50px;
        }

        .leaflet-popup {
            z-index: 10000 !important;
        }

        .navigation-alert {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            display: none;
            opacity: 0;
            transform: translateY(-20px);
            transition: all 0.3s ease;
        }

        .navigation-alert.show {
            display: block;
            opacity: 1;
            transform: translateY(0);
        }

        .clear-btn {
            background: linear-gradient(135deg, #dc3545 0%, #e83e8c 100%);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-left: 10px;
        }

        .clear-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 3px 10px rgba(220, 53, 69, 0.3);
        }

        .loading-indicator {
            display: none;
            text-align: center;
            padding: 20px;
            color: #667eea;
        }

        .loading-indicator.show {
            display: block;
        }

        
        @media (max-width: 768px) {
            .container_m {
                padding: 15px;
                gap: 15px;
            }
            
            .button-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .button-section,
            .map-section,
            .directions-section {
                padding: 20px;
            }
            
            .map-container {
                min-height: 250px;
            }
            
            .directions-content {
                height: 120px;
            }

            .map-directions-wrapper {
                flex-direction: column;
            }
        }

        
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

         @keyframes slideInDown {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .button-section,
        .map-section,
        .directions-section {
            animation: fadeInUp 0.6s ease forwards;
        }

        .map-section {
            animation-delay: 0.2s;
        }

        .directions-section {
            animation-delay: 0.4s;
        }
    </style>
</head>

<body>
    <div class="container_m">

        <!-- Alert per navigazione -->
        <div id="navigationAlert" class="navigation-alert">
            <strong>üéØ Navigazione impostata!</strong> 
            <span id="alertText"></span>
            <button class="clear-btn" onclick="clearNavigation()">‚úï Cancella</button>
        </div>

        <!-- Loading indicator -->
        <div id="loadingIndicator" class="loading-indicator">
            <div>üó∫Ô∏è Caricamento mappa...</div>
        </div>

        <!-- Pulsanti -->
        <section class="button-section">
            <h2>üéõÔ∏è Controlli Navigazione</h2>
            <div class="button-grid">

                <select id="startSelect" class="select">
                    <div class="dropdown">
                        <option value="">Seleziona partenza</option>
                        <% @sedi.each do |sede| %>
                        <option value="<%= sede.id %>"><%= sede.nome %> (<%= sede.indirizzo %>)</option>
                        <% end %>
                    </div>
                </select>
                <select id="endSelect" class="select">
                    <div class="dropdown">
                        <option value="">Seleziona destinazione</option>
                        <% @sedi.each do |sede| %>
                        <option value="<%= sede.id %>"><%= sede.nome %> (<%= sede.indirizzo %>)</option>
                        <% end %>
                    </div>
                </select>

                <button id="calculateRouteBtn" class="control-btn">üó∫Ô∏è Calcola Percorso</button>
                <button class="control-btn" onclick="saveRoute()">üíæ Salva Percorso</button>
            </div>
        </section>

        <div class="map-directions-wrapper">
            <section class="map-section">
                <h2>üó∫Ô∏è Mappa Interattiva</h2>
                <div class="map-container" id="mapContainer">
                    <div id="map" style="height: 60vh; width: 100%;"></div>
                </div>
            </section>
    
            <section class="directions-section">
                <h2>üß≠ Indicazioni Stradali</h2>
                <div class="directions-content" id="directionsContent">
                    <div class="placeholder-text">
                        Le indicazioni appariranno qui dopo aver calcolato un percorso
                    </div>
                </div>
            </section>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>

    <script>
    // Sedi dal DB con lat e long
    const sedi = <%= @sedi.to_json(only: [:id, :nome, :indirizzo, :lat, :long]).html_safe %>;

    // Inizializza la mappa centrata su Roma
    var map = L.map('map').setView([41.8902, 12.4922], 14);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    // Layer per marker meteo
    var weatherLayer = L.layerGroup().addTo(map);

    // Routing
    var routingControl = L.Routing.control({
        waypoints: [],
        routeWhileDragging: true,
        geocoder: L.Control.Geocoder.nominatim(),
        show: false
    }).addTo(map);

    var directionsContainer = document.getElementById('directionsContent');

    // Marker generali per tutte le sedi
    function addMarkers() {
        sedi.forEach(sede => {
            if (sede.lat != null && sede.long != null) {
                L.marker([parseFloat(sede.lat), parseFloat(sede.long)])
                    .addTo(map)
                    .bindPopup(`<b>${sede.nome}</b><br>${sede.indirizzo}`);
            }
        });
    }

    // Marker per partenza e destinazione selezionate
    let routeMarkers = [];

    function addRouteMarkers(startSede, endSede) {
        // Rimuovi vecchi marker
        routeMarkers.forEach(m => map.removeLayer(m));
        routeMarkers = [];

        const startMarker = L.marker([parseFloat(startSede.lat), parseFloat(startSede.long)])
            .addTo(map)
            .bindPopup('Partenza');

        const endMarker = L.marker([parseFloat(endSede.lat), parseFloat(endSede.long)])
            .addTo(map)
            .bindPopup('Destinazione');

        routeMarkers.push(startMarker, endMarker);
    }

    // Percorso di default (Colosseo ‚Üí Fontana di Trevi)
    function initializeDefaultRoute() {
        routingControl.setWaypoints([
            L.latLng(41.8902, 12.4922),
            L.latLng(41.9028, 12.4964)
        ]);
    }

    // Calcola percorso dai dropdown
    document.getElementById('calculateRouteBtn').addEventListener('click', () => {
        const startId = parseInt(document.getElementById('startSelect').value);
        const endId = parseInt(document.getElementById('endSelect').value);

        if (!startId || !endId) {
            alert('Seleziona sia partenza che destinazione!');
            return;
        }

        const startSede = sedi.find(s => s.id === startId);
        const endSede = sedi.find(s => s.id === endId);

        if (!startSede || !endSede) {
            alert('Sede non trovata!');
            return;
        }

        routingControl.setWaypoints([
            L.latLng(parseFloat(startSede.lat), parseFloat(startSede.long)),
            L.latLng(parseFloat(endSede.lat), parseFloat(endSede.long))
        ]);

        map.fitBounds([
            [parseFloat(startSede.lat), parseFloat(startSede.long)],
            [parseFloat(endSede.lat), parseFloat(endSede.long)]
        ]);

        addRouteMarkers(startSede, endSede);
    });

    // Mostra alert di navigazione
    function showNavigationAlert(destinationName, destinationAddress) {
        const alert = document.getElementById('navigationAlert');
        const alertText = document.getElementById('alertText');
        alertText.textContent = `Destinazione: ${destinationName} (${destinationAddress})`;
        alert.style.display = 'block';
        setTimeout(() => alert.classList.add('show'), 10);
    }

    // Pulisce navigazione e resetta mappa
    function clearNavigation() {
        const alert = document.getElementById('navigationAlert');
        alert.classList.remove('show');
        setTimeout(() => alert.style.display = 'none', 300);

        document.getElementById('startSelect').value = '';
        document.getElementById('endSelect').value = '';

        initializeDefaultRoute();
        weatherLayer.clearLayers();
        routeMarkers.forEach(m => map.removeLayer(m));
        routeMarkers = [];

        directionsContainer.innerHTML = '<div class="placeholder-text">Le indicazioni appariranno qui dopo aver calcolato un percorso</div>';
    }

    // Inizializza la mappa con tutti i marker e percorso di default
    addMarkers();

    // Controllo eventuali dati di navigazione salvati
    function checkForNavigationData() {
        const navigationData = sessionStorage.getItem('navigationData');
        if (navigationData) {
            try {
                const data = JSON.parse(navigationData);

                showNavigationAlert(data.destinationName, data.destination);

                document.getElementById('endSelect').value = data.destinationId || '';

                // Qui puoi eventualmente calcolare percorso automatico se vuoi
                // calculateRouteFromData(data);

                sessionStorage.removeItem('navigationData');
            } catch (error) {
                console.error('Errore nel parsing dei dati di navigazione:', error);
                initializeDefaultRoute();
            }
        }
    }

    checkForNavigationData();




    // Mostra istruzioni + meteo
    routingControl.on('routesfound', function(e) {
        var route = e.routes[0];
        var instructions = `
            <h3>üö¶ Riepilogo Percorso</h3>
            <p>Distanza: ${(route.summary.totalDistance / 1000).toFixed(1)} km</p>
            <p>Durata: ${Math.round(route.summary.totalTime / 60)} min</p>
            <h3>üßæ Indicazioni:</h3><ol>
        `;

        route.instructions.forEach(function(inst) {
            instructions += `<li>${inst.text}</li>`;
        });
        instructions += `</ol>`;
        directionsContainer.innerHTML = instructions;

        // Meteo per start e end
        const startLL = e.waypoints[0].latLng;
        const endLL = e.waypoints[e.waypoints.length - 1].latLng;

        //Debug
        console.log('Waypoint start:', startLL);
        console.log('Waypoint end:', endLL);

        weatherLayer.clearLayers();
        addWeatherMarker(startLL.lat, startLL.lng, "üìç Partenza");
        addWeatherMarker(endLL.lat, endLL.lng, "üèÅ Arrivo");
    });

        


    // Geocoding
    async function geocode(query) {
        const url = new URL('https://nominatim.openstreetmap.org/search');
        url.searchParams.set('q', query);
        url.searchParams.set('format', 'json');
        url.searchParams.set('limit', '1');

        const res = await fetch(url.toString(), { headers: { 'Accept': 'application/json' } });
        const data = await res.json();
        if (!data || data.length === 0) throw new Error('Nessun risultato per: ' + query);
        const { lat, lon } = data[0];
        return { lat: parseFloat(lat), lon: parseFloat(lon) };
    }

        // Calcolo percorso
    async function calculateRoute() {
        const start = document.getElementById('startInput').value.trim();
        const end = document.getElementById('endInput').value.trim();
        if (!start || !end) {
            alert('Inserisci entrambi gli indirizzi.');
            return;
        }

        try {
            let from, to;
            
            // Se start √® "Posizione attuale", usa la geolocation
            if (start === 'Posizione attuale') {
                from = await getCurrentLocation();
            } else {
                from = await geocode(start);
            }
            
            to = await geocode(end);
            
            routingControl.setWaypoints([
                L.latLng(from.lat, from.lng || from.lon),
                L.latLng(to.lat, to.lng || to.lon)
            ]);
        } catch (err) {
            alert(err.message);
        }
    }

    document.getElementById('routeBtn').addEventListener('click', calculateRoute);

        // Funzione per aggiungere meteo
    function addWeatherMarker(lat, lon, label) {
        const marker = L.marker([lat, lon]).addTo(weatherLayer).bindPopup('Caricamento meteo...');
        fetch(`/home/weather?lat=${lat}&lon=${lon}`)
            .then(res => res.json())
            .then(data => {
                if (data.temperature !== undefined) {
                    marker.setPopupContent(`
                        <b>${label}</b><br>
                        üå°Ô∏è ${data.temperature} ¬∞C<br>
                        üí® ${data.windspeed} km/h<br>
                        ‚è∞ ${data.time}
                    `);
                    marker.openPopup();
                }
            });

    }

    function saveRoute() {
        const start = document.getElementById('startInput').value;
        const end = document.getElementById('endInput').value;
        
        if (!start || !end) {
            alert('Calcola prima un percorso per salvarlo.');
            return;
        }

        // Qui potresti salvare nel localStorage o inviare al server
        const routeData = {
            start: start,
            end: end,
            transport: document.getElementById('transportMode').value,
            timestamp: new Date().toISOString()
        };

        localStorage.setItem('savedRoute_' + Date.now(), JSON.stringify(routeData));
        alert('Percorso salvato con successo!');
    }

    // Rendi la funzione globale per il pulsante
    window.clearNavigation = clearNavigation;
    </script>
</body>
</html>