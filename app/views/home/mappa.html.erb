<!DOCTYPE html>
<html lang="it">
<head>

<!-- Librerie Leaflet -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: white;
            min-height: 100vh;
            color: #333;
        }

        .container_m {
            max-width: 1450px;
            margin: 0 auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        
        .button-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .button-section h2 {
            margin-bottom: 20px;
            color: #4a5568;
            font-size: 1.5rem;
            text-align: center;
        }

        .button-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
        }

        
        .select {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            height: 70%;
            border: none;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
            position: relative;
            grid-column: span 2;
        }

        .dropdown {
            width: 100%;
            padding: 12px 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
            appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 15px center;
            background-size: 16px;
            padding-right: 45px; 
        }

        .dropdown:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }

        .dropdown:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.3);
        }

        .dropdown option {
            background: white; 
            color: #333;       
            padding: 10px;
        }

        .control-btn, #startInput, #endInput {
            padding: 12px 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        #startInput, #endInput {
            cursor: text;
        }

        #startInput::placeholder, #endInput::placeholder {
            color: rgba(255, 255, 255, 0.8);
        }

        .control-btn:hover, #startInput:focus, #endInput:focus{
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }

        .control-btn:active {
            transform: translateY(0);
        }

        
        .map-directions-wrapper {
            display: flex;
            align-items: stretch;
            flex-direction: row;
            gap: 20px;
            width: 100%;
            align-items: flex-start;
        }
        
        .map-section {
            flex: 2;
            min-height: 400px;
            background: rgba(255, 255, 255, 0.95);
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .map-section h2 {
            margin-bottom: 20px;
            color: #4a5568;
            font-size: 1.5rem;
            text-align: center;
        }

        .map-container {
            width: 100%;
            height: calc(100% - 60px);
            border-radius: 10px;
            min-height: 400px;
            position: relative;
            overflow: visible !important;
        }

        .map-placeholder {
            text-align: center;
            color: #718096;
            font-size: 18px;
        }

        .map-placeholder::before {
            content: "üó∫Ô∏è";
            font-size: 4rem;
            display: block;
            margin-bottom: 15px;
            opacity: 0.6;
        }

        
        .directions-section {
            flex: 1;
            background: rgba(255, 255, 255, 0.95);
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            min-height: 400px;
            max-height: 900px;
            overflow-y: auto;
        }

        .directions-section h2 {
            margin-bottom: 20px;
            color: #4a5568;
            font-size: 1.5rem;
            text-align: center;
        }

        .directions-content {
            background: #f8fafc;
            border-radius: 10px;
            padding: 20px;
            height: calc(100% - 60px);
            overflow-y: auto;
            border: 1px solid #e2e8f0;
        }

        .direction-item {
            padding: 10px 0;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .direction-item:last-child {
            border-bottom: none;
        }

        .direction-icon {
            width: 20px;
            height: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 10px;
        }

        .placeholder-text {
            color: #a0aec0;
            font-style: italic;
            text-align: center;
            margin-top: 50px;
        }

        .leaflet-popup {
            z-index: 10000 !important;
        }

        .navigation-alert {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            display: none;
            opacity: 0;
            transform: translateY(-20px);
            transition: all 0.3s ease;
        }

        .navigation-alert.show {
            display: block;
            opacity: 1;
            transform: translateY(0);
        }

        .clear-btn {
            background: linear-gradient(135deg, #dc3545 0%, #e83e8c 100%);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-left: 10px;
        }

        .clear-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 3px 10px rgba(220, 53, 69, 0.3);
        }

        .loading-indicator {
            display: none;
            text-align: center;
            padding: 20px;
            color: #667eea;
        }

        .loading-indicator.show {
            display: block;
        }

        
        @media (max-width: 768px) {
            .container_m {
                padding: 15px;
                gap: 15px;
            }
            
            .button-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .button-section,
            .map-section,
            .directions-section {
                padding: 20px;
            }
            
            .map-container {
                min-height: 250px;
            }
            
            .directions-content {
                height: 120px;
            }

            .map-directions-wrapper {
                flex-direction: column;
            }
        }

        
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

         @keyframes slideInDown {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .button-section,
        .map-section,
        .directions-section {
            animation: fadeInUp 0.6s ease forwards;
        }

        .map-section {
            animation-delay: 0.2s;
        }

        .directions-section {
            animation-delay: 0.4s;
        }
    </style>
</head>

<body>
    <div class="container_m">

        <!-- Alert per navigazione -->
        <div id="navigationAlert" class="navigation-alert">
            <strong>üéØ Navigazione impostata!</strong> 
            <span id="alertText"></span>
            <button class="clear-btn" onclick="clearNavigation()">‚úï Cancella</button>
        </div>

        <!-- Loading indicator -->
        <div id="loadingIndicator" class="loading-indicator">
            <div>üó∫Ô∏è Caricamento mappa...</div>
        </div>
        

        <!-- Pulsanti -->
        <section class="button-section">
            <h2>üéõÔ∏è Controlli Navigazione</h2>
            <div class="button-grid">

                <select id="startSelect" class="select">
                    <div class="dropdown">
                        <option value="">Seleziona partenza</option>
                        <% @sedi.each do |sede| %>
                        <option value="<%= sede.id %>"><%= sede.nome %> (<%= sede.indirizzo %>)</option>
                        <% end %>
                    </div>
                </select>
                <select id="endSelect" class="select">
                    <div class="dropdown">
                        <option value="">Seleziona destinazione</option>
                        <% @sedi.each do |sede| %>
                        <option value="<%= sede.id %>"><%= sede.nome %> (<%= sede.indirizzo %>)</option>
                        <% end %>
                    </div>
                </select>

                <button id="calculateRouteBtn" class="control-btn">üó∫Ô∏è Calcola Percorso</button>
                <button class="control-btn" onclick="saveRoute()">üíæ Salva Percorso</button>
            </div>
        </section>

        <div class="map-directions-wrapper">
            <section class="map-section">
                <h2>üó∫Ô∏è Mappa Interattiva</h2>
                <div class="map-container" id="mapContainer">
                    <div id="map" style="height: 60vh; width: 100%;"></div>
                </div>
            </section>
    
            <section class="directions-section">
                <h2>üß≠ Indicazioni Stradali</h2>
                <div class="directions-content" id="directionsContent">
                    <div class="placeholder-text">
                        Le indicazioni appariranno qui dopo aver calcolato un percorso
                    </div>
                </div>
            </section>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>

    <script>
    // Definiamo la funzione di setup che conterr√† tutta la logica della pagina.
    // In questo modo, le variabili come 'sedi' vengono dichiarate solo all'interno di questa funzione,
    // evitando conflitti quando Turbo naviga tra le pagine.
    const initializeMapPage = () => {

        // =====================================================================
        // 1. DATI E VARIABILI PRINCIPALI
        // =====================================================================

        // I dati vengono passati dal backend Rails.
        const sedi = <%= @sedi.to_json(only: [:id, :nome, :indirizzo, :lat, :long]).html_safe %>;
        
        // Selezioniamo gli elementi del DOM una sola volta per efficienza.
        const directionsContainer = document.getElementById('directionsContent');
        const calculateBtn = document.getElementById('calculateRouteBtn');
        const startSelect = document.getElementById('startSelect');
        const endSelect = document.getElementById('endSelect');

        // Questa variabile terr√† traccia dei marker di partenza/arrivo.
        let routeMarkers = [];

        // =====================================================================
        // 2. PULIZIA E INIZIALIZZAZIONE DELLA MAPPA (FIX PER TURBO)
        // =====================================================================

        // Controlla se un'istanza della mappa esiste gi√† (da una visita precedente della pagina).
        // Se s√¨, la rimuoviamo completamente per evitare errori.
        if (window.map instanceof L.Map) {
            window.map.remove();
        }

        // Inizializza la nuova mappa e la assegna a una variabile globale `window.map`
        // in modo da poterla trovare e rimuovere alla prossima navigazione Turbo.
        window.map = L.map('map').setView([41.8990, 12.5012], 13.5);

        // Aggiunge il layer di base della mappa da OpenStreetMap.
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(window.map);

        // Inizializza i layer per il meteo e il routing.
        const weatherLayer = L.layerGroup().addTo(window.map);
        const routingControl = L.Routing.control({
            waypoints: [],
            routeWhileDragging: true,
            geocoder: L.Control.Geocoder.nominatim(),
            show: false // Nascondiamo le indicazioni di default di Leaflet per usare le nostre.
        }).addTo(window.map);

        // =====================================================================
        // 3. FUNZIONI HELPER
        // =====================================================================
        
        // Mostra l'indicatore di caricamento.
        const showLoading = () => document.getElementById('loadingIndicator').classList.add('show');
        
        // Nasconde l'indicatore di caricamento.
        const hideLoading = () => document.getElementById('loadingIndicator').classList.remove('show');
        
        // Aggiunge i marker di tutte le sedi sulla mappa.
        const addAllSediMarkers = () => {
            sedi.forEach(sede => {
                if (sede.lat && sede.long) {
                    L.marker([parseFloat(sede.lat), parseFloat(sede.long)])
                        .addTo(window.map)
                        .bindPopup(`<b>${sede.nome}</b><br>${sede.indirizzo}`);
                }
            });
        };

        // Aggiunge/aggiorna i marker specifici per il percorso calcolato.
        const addRouteMarkers = (startSede, endSede) => {
            routeMarkers.forEach(m => window.map.removeLayer(m));
            routeMarkers = [];
            
            const startMarker = L.marker([parseFloat(startSede.lat), parseFloat(startSede.long)]).addTo(window.map).bindPopup('üìç Partenza');
            const endMarker = L.marker([parseFloat(endSede.lat), parseFloat(endSede.long)]).addTo(window.map).bindPopup('üèÅ Destinazione');
            
            routeMarkers.push(startMarker, endMarker);
        };
        
        // Aggiunge un marker con le informazioni meteo.
        const addWeatherMarker = (lat, lon, label) => {
            const marker = L.marker([lat, lon]).addTo(weatherLayer).bindPopup('Caricamento meteo...');
            fetch(`/home/weather?lat=${lat}&lon=${lon}`)
                .then(res => res.json())
                .then(data => {
                    if (data.temperature !== undefined) {
                        marker.setPopupContent(`<b>${label}</b><br>üå°Ô∏è ${data.temperature} ¬∞C<br>üí® ${data.windspeed} km/h`);
                        marker.openPopup();
                    }
                });
        };

        // Funzione per pulire il percorso e resettare la vista.
        const clearNavigation = () => {
            document.getElementById('navigationAlert').classList.remove('show');
            startSelect.value = '';
            endSelect.value = '';
            weatherLayer.clearLayers();
            routeMarkers.forEach(m => window.map.removeLayer(m));
            routeMarkers = [];
            routingControl.setWaypoints([]); // Rimuove il percorso dalla mappa
            directionsContainer.innerHTML = '<div class="placeholder-text">Le indicazioni appariranno qui...</div>';
            window.map.setView([41.8902, 13.4922], 14); // Ricentra la mappa
        };
        
        // Rende la funzione `clearNavigation` accessibile dall'HTML (`onclick`).
        window.clearNavigation = clearNavigation;

        // =====================================================================
        // 4. EVENT LISTENERS E LOGICA PRINCIPALE
        // =====================================================================

        // Event listener per il pulsante "Calcola Percorso".
        calculateBtn.addEventListener('click', () => {
            showLoading();

            const startSede = sedi.find(s => s.id === parseInt(startSelect.value));
            const endSede = sedi.find(s => s.id === parseInt(endSelect.value));

            if (!startSede || !endSede) {
                alert('Seleziona sia una partenza che una destinazione valide!');
                hideLoading();
                return;
            }

            routingControl.setWaypoints([
                L.latLng(parseFloat(startSede.lat), parseFloat(startSede.long)),
                L.latLng(parseFloat(endSede.lat), parseFloat(endSede.long))
            ]);

            window.map.fitBounds([
                [parseFloat(startSede.lat), parseFloat(startSede.long)],
                [parseFloat(endSede.lat), parseFloat(endSede.long)]
            ], { padding: [50, 50] });

            addRouteMarkers(startSede, endSede);
        });

        // Event listener per quando il percorso √® stato calcolato con successo.
        routingControl.on('routesfound', function(e) {
            hideLoading();
            
            const route = e.routes[0];
            let instructionsHTML = `
                <h3>üö¶ Riepilogo Percorso</h3>
                <p><b>Distanza:</b> ${(route.summary.totalDistance / 1000).toFixed(1)} km</p>
                <p><b>Durata:</b> ${Math.round(route.summary.totalTime / 60)} min</p>
                <h3>üßæ Indicazioni:</h3>
                <ol>`;
            
            route.instructions.forEach(inst => {
                instructionsHTML += `<li>${inst.text}</li>`;
            });
            
            instructionsHTML += `</ol>`;
            directionsContainer.innerHTML = instructionsHTML;

            // Aggiorna il meteo per i punti di inizio e fine
            const startLL = e.waypoints[0].latLng;
            const endLL = e.waypoints[e.waypoints.length - 1].latLng;
            weatherLayer.clearLayers();
            addWeatherMarker(startLL.lat, startLL.lng, "Partenza");
            addWeatherMarker(endLL.lat, endLL.lng, "Arrivo");
        });
        
        // Event listener per quando si verifica un errore nel calcolo del percorso.
        routingControl.on('routingerror', function(e) {
            hideLoading();
            alert("Impossibile calcolare il percorso. Controlla i punti selezionati e riprova.");
            console.error("Errore di routing:", e.error);
        });

        // =====================================================================
        // 5. ESECUZIONE INIZIALE
        // =====================================================================
        addAllSediMarkers();

    }; // Fine della funzione `initializeMapPage`

    // =====================================================================
    // 6. AGGANCIO AL CICLO DI VITA DI TURBO
    // =====================================================================
    
    // Esegui la nostra funzione di setup ogni volta che Turbo carica una pagina.
    // Questo √® il fix principale per tutti gli errori legati a Turbo.
    document.addEventListener('turbo:load', initializeMapPage);
</script>
</body>
</html>