<div class="container">
        <!-- Sezione Pulsantiera -->
        <section class="button-section">
            <h2>🎛️ Controlli Navigazione</h2>
            <div class="button-grid">
                <input id="startInput" type="text" placeholder="📍 Partenza"</input>
                <input id="endInput" type="text" placeholder="🧭 Destinazione"</input>
                <button id="routeBtn" class="control-btn" onclick="calculateRoute()">🗺️ Calcola Percorso</button>
                <button class="control-btn" onclick="saveRoute()">💾 Salva Percorso</button>
                <!-- Menu a tendina mezzi di trasporto -->
                <div class="transport-select">
                    <select class="transport-dropdown" id="transportMode" onchange="changeTransportMode()">
                        <option value="driving">🚗 Automobile</option>
                        <option value="walking">🚶 A piedi</option>
                        <option value="cycling">🚴 Bicicletta</option>
                        <option value="transit">🚌 Trasporti pubblici</option>
                        <option value="motorcycle">🏍️ Motocicletta</option>
                        <option value="truck">🚛 Camion</option>
                    </select>
                </div>
            </div>
        </section>

        <div class="map-directions-wrapper">
          <section class="map-section">
            <h2>🗺️ Mappa Interattiva</h2>
        <div class="map-container" id="mapContainer">
            <div id="map" style="height: 60vh; width: 100%;"></div>
        </div>
          </section>

          <section class="directions-section">
            <h2>🧭 Indicazioni Stradali</h2>
            <div class="directions-content" id="directionsContent">
              <div class="placeholder-text">
                Le indicazioni stradali appariranno qui dopo aver calcolato un percorso
              </div>
            </div>
          </section>
        </div>

</div>






<!-- Scripts Leaflet -->
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />

<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>
<script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>

<script>
var map = L.map('map').setView([41.8902, 12.4922], 14);
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  maxZoom: 19,
  attribution: '&copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors'
}).addTo(map);

var directionsContainer = document.getElementById('directionsContent');

// Routing control senza pannello interno
var routingControl = L.Routing.control({
  waypoints: [
    L.latLng(41.8902, 12.4922),
    L.latLng(41.9028, 12.4964)
  ],
  routeWhileDragging: true,
  geocoder: L.Control.Geocoder.nominatim(),
  show: false // Disabilita pannello interno
}).addTo(map);

// Funzione per aggiornare il div con le istruzioni
routingControl.on('routesfound', function(e) {
  var routes = e.routes;
  if (routes.length > 0) {
    var instructions = '';
    routes[0].instructions = routes[0].instructions || [];
    routes[0].instructions = routes[0].instructions;

    // Usa summary + istruzioni dettagliate
    instructions += `<h3>🚦 Riepilogo Percorso</h3>`;
    instructions += `<p>Distanza: ${routes[0].summary.totalDistance / 1000} km</p>`;
    instructions += `<p>Durata: ${Math.round(routes[0].summary.totalTime / 60)} min</p>`;
    instructions += `<h3>🧾 Indicazioni:</h3><ol>`;
    
    routes[0].instructions.forEach(function(inst) {
      instructions += `<li>${inst.text}</li>`;
    });
    
    instructions += `</ol>`;

    directionsContainer.innerHTML = instructions;
  }
});

// Funzione di geocoding per input
async function geocode(query) {
  const url = new URL('https://nominatim.openstreetmap.org/search');
  url.searchParams.set('q', query);
  url.searchParams.set('format', 'json');
  url.searchParams.set('limit', '1');

  const res = await fetch(url.toString(), { headers: { 'Accept': 'application/json' } });
  const data = await res.json();
  if (!data || data.length === 0) throw new Error('Nessun risultato per: ' + query);
  const { lat, lon } = data[0];
  return { lat: parseFloat(lat), lon: parseFloat(lon) };
}

// Evento sul pulsante "Calcola Percorso"
document.getElementById('routeBtn').addEventListener('click', async () => {
  const start = document.getElementById('startInput').value.trim();
  const end = document.getElementById('endInput').value.trim();
  if (!start || !end) {
    alert('Inserisci entrambi gli indirizzi.');
    return;
  }
  try {
    const [from, to] = await Promise.all([geocode(start), geocode(end)]);
    routingControl.setWaypoints([
      L.latLng(from.lat, from.lon),
      L.latLng(to.lat, to.lon)
    ]);
  } catch (err) {
    alert(err.message);
  }
});

</script>
