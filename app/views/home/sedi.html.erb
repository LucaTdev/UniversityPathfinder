<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>University Pathfinder</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        
        .main-content {
            flex: 1 0 auto;
        }
    
        .mode-switch {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 50px;
            padding: 5px;
            display: inline-flex;
            margin-bottom: 2rem;
        }
        
        .mode-btn {
            border: none;
            padding: 10px 20px;
            border-radius: 45px;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .mode-btn.active {
            background: white;
            color: #667eea;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .mode-btn:not(.active) {
            background: transparent;
            color: white;
        }
        
        .university-card {
            transition: transform 0.2s, box-shadow 0.2s;
            cursor: pointer;
            border: none;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .university-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 20px rgba(0,0,0,0.15);
        }
        
        .page-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 3rem 0;
            margin-bottom: 3rem;
        }
        
        .building-item {
            background: #f8f9fa;
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 0.9em;
            margin: 2px;
            display: inline-block;
        }

        .navigate-btn {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            font-weight: 500;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            margin-top: 15px;
        }

        .navigate-btn:hover {
            background: linear-gradient(135deg, #218838 0%, #1ea085 100%);
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
            color: white;
        }

        .footer{
            width:100%;
            background-color: #343a40; 
            color: white;
            padding: 1rem;
        }

        .footer, .push {
            height: 90px; 
        }

        .loading-spinner {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .error-message {
            display: none;
            background: #f8d7da;
            color: #721c24;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .success-message {
            display: none;
            background: #d1e7dd;
            color: #0f5132;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

    </style>
</head>

<body>
    <!-- Header -->
    <div class="page-header text-center">
        <div class="container">
            <h1 class="display-4 fw-bold mb-4"><i class="fas fa-map-marked-alt me-2"></i>University Pathfinder</h1>
            
            <!-- Mode Switch -->
            <div class="mode-switch">
                <button type="button" class="mode-btn active" id="userBtn" onclick="switchMode('user')">
                    <i class="fas fa-user me-2"></i>Utente
                </button>
                <button type="button" class="mode-btn" id="adminBtn" onclick="switchMode('admin')">
                    <i class="fas fa-shield-alt me-2"></i>Amministratore
                </button>
            </div>
        </div>
    </div>
    
    <div class="main-content">
        <div class="container">
            <!-- Loading Spinner -->
            <div id="loadingSpinner" class="loading-spinner">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Caricamento...</span>
                </div>
                <p class="mt-2">Caricamento sedi universitarie...</p>
            </div>

            <!-- Error Message -->
            <div id="errorMessage" class="error-message">
                <strong>Errore!</strong> <span id="errorText"></span>
            </div>

            <!-- Success Message -->
            <div id="successMessage" class="success-message">
                <strong>Successo!</strong> <span id="successText"></span>
            </div>

            <!-- Modalità Utente -->
            <div id="userMode" class="mode-content">
                <h2 class="mb-4">
                    <i class="fas fa-university me-2"></i>Sedi Universitarie
                </h2>
            
                <!-- Universities List -->
                <div class="row" id="universitiesList">
                    <!-- Dynamic content will be inserted here -->
                </div>
            </div>

            <!-- Modalità admin -->
            <div id="adminMode" class="mode-content d-none">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2>
                        <i class="fas fa-cog me-2"></i>Amministrazione Sedi
                    </h2>
                    <button type="button" class="btn btn-success" onclick="showAddForm()">
                        <i class="fas fa-plus me-2"></i>Aggiungi Sede
                    </button>
                </div>

                <!-- Add/Edit Form -->
                <div id="addForm" class="card mb-4 d-none">
                    <div class="card-header">
                        <h5 class="mb-0" id="formTitle">
                            <i class="fas fa-plus me-2"></i>Nuova Sede Universitaria
                        </h5>
                    </div>
                    <div class="card-body">
                        <form id="universityForm">
                            <input type="hidden" id="universityId" value="">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="nomeSede" class="form-label">Nome Sede *</label>
                                    <input type="text" class="form-control" id="nomeSede" required>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="indirizzoSede" class="form-label">Indirizzo Sede *</label>
                                    <input type="text" class="form-control" id="indirizzoSede" required>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Edifici presenti nella sede *</label>
                                <div id="edificiContainer">
                                    <div class="input-group mb-2">
                                        <input type="text" class="form-control edificio-input" placeholder="Nome edificio" required>
                                        <button type="button" class="btn btn-outline-danger" onclick="removeBuilding(this)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="addBuildingInput()">
                                    <i class="fas fa-plus me-2"></i>Aggiungi Edificio
                                </button>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="nomeSede" class="form-label">Latitudine sede *</label>
                                    <input type="text" class="form-control" id="latSede" required>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="indirizzoSede" class="form-label">Longitudine sede *</label>
                                    <input type="text" class="form-control" id="longSede" required>
                                </div>
                            </div>
                            
                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-primary" id="saveBtn">
                                    <i class="fas fa-save me-2"></i>Salva Sede
                                </button>
                                <button type="button" class="btn btn-secondary" onclick="hideAddForm()">
                                    <i class="fas fa-times me-2"></i>Annulla
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Admin Universities List -->
                <div class="row" id="adminUniversitiesList">
                    <!-- Dynamic content will be inserted here -->
                </div>
            </div>

            <!-- University Detail Modal -->
            <div class="modal fade" id="universityModal" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="modalTitle"></h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body" id="modalBody">
                            <!-- Dynamic content -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <div class="sticky-bottom">
        <footer class="footer">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <h5>University Pathfinder</h5>
                        <p class="mb-0" style="opacity: 0.8;">La tua app di navigazione universitaria</p>
                    </div>
                    <div class="col-md-6 text-md-end">
                        <p class="mb-0" style="opacity: 0.8;">&copy; 2025 University Pathfinder. Tutti i diritti riservati.</p>
                    </div>
                </div>
            </div>
        </footer>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Variabile globale per memorizzare le sedi
        let universities = [];
        let currentMode = 'user';

        // Utility functions per gestire UI
        function showLoading() {
            document.getElementById('loadingSpinner').style.display = 'block';
        }

        function hideLoading() {
            document.getElementById('loadingSpinner').style.display = 'none';
        }

        function showError(message) {
            document.getElementById('errorText').textContent = message;
            document.getElementById('errorMessage').style.display = 'block';
            setTimeout(() => {
                document.getElementById('errorMessage').style.display = 'none';
            }, 5000);
        }

        function showSuccess(message) {
            document.getElementById('successText').textContent = message;
            document.getElementById('successMessage').style.display = 'block';
            setTimeout(() => {
                document.getElementById('successMessage').style.display = 'none';
            }, 3000);
        }

        // Funzione per ottenere il CSRF token
        function getCSRFToken() {
            const meta = document.querySelector('meta[name="csrf-token"]');
            return meta ? meta.getAttribute('content') : '';
        }

        // API Calls per comunicare con Rails backend
        async function fetchUniversities() {
            try {
                showLoading();
                const response = await fetch("/sedi", {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                universities = data;
                hideLoading();
                
                if (currentMode === 'user') {
                    renderUserUniversities();
                } else {
                    renderAdminUniversities();
                }
                
            } catch (error) {
                hideLoading();
                showError('Errore nel caricamento delle sedi: ' + error.message);
                console.error('Error fetching universities:', error);
            }
        }

        async function createUniversity(sedeData) {
            try {
                const response = await fetch('/sedi', {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': getCSRFToken()
                    },
                    body: JSON.stringify({ sede: sedeData })
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.errors ? data.errors.join(', ') : 'Errore nella creazione');
                }

                return data;
            } catch (error) {
                throw error;
            }
        }

        async function updateUniversity(id, sedeData) {
            try {
                const response = await fetch(`/sedi/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': getCSRFToken()
                    },
                    body: JSON.stringify({ sede: sedeData })
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.errors ? data.errors.join(', ') : 'Errore nell\'aggiornamento');
                }

                return data;
            } catch (error) {
                throw error;
            }
        }

        async function deleteUniversityFromServer(id) {
            try {
                const response = await fetch(`/sedi/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': getCSRFToken()
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                return true;
            } catch (error) {
                throw error;
            }
        }

        function switchMode(mode) {
            currentMode = mode;
            
            // Update buttons
            document.getElementById('userBtn').classList.toggle('active', mode === 'user');
            document.getElementById('adminBtn').classList.toggle('active', mode === 'admin');
            
            // Show/hide content
            document.getElementById('userMode').classList.toggle('d-none', mode !== 'user');
            document.getElementById('adminMode').classList.toggle('d-none', mode !== 'admin');
            
            // Refresh lists
            if (mode === 'user') {
                renderUserUniversities();
            } else {
                renderAdminUniversities();
            }
        }

        function renderUserUniversities() {
            const container = document.getElementById('universitiesList');
            container.innerHTML = '';

            if (universities.length === 0) {
                container.innerHTML = `
                    <div class="col-12 text-center py-5">
                        <i class="fas fa-university fa-3x text-muted mb-3"></i>
                        <h4 class="text-muted">Nessuna sede universitaria disponibile</h4>
                        <p class="text-muted">Le sedi universitarie verranno visualizzate qui una volta aggiunte.</p>
                    </div>
                `;
                return;
            }

            universities.forEach(uni => {
                const edificiArray = Array.isArray(uni.edifici) ? uni.edifici : [];
                const card = `
                    <div class="col-lg-4 col-md-6 mb-4">
                        <div class="card university-card h-100" onclick="showUniversityDetails(${uni.id})">
                            <div class="card-body">
                                <h5 class="card-title text-primary">
                                    <i class="fas fa-university me-2"></i>${uni.nome}
                                </h5>
                                <p class="card-text text-muted mb-3">
                                    <i class="fas fa-map-marker-alt me-2"></i>${uni.indirizzo}
                                </p>
                                <p class="small text-muted mb-3">
                                    <i class="fas fa-globe me-2"></i>${uni.latitudine}, ${uni.longitudine}
                                </p>
                                <div class="mb-2">
                                    <small class="text-muted">Edifici: ${edificiArray.length}</small>
                                </div>
                                <div class="d-flex flex-wrap">
                                    ${edificiArray.slice(0, 2).map(edificio => 
                                        `<span class="building-item">${edificio}</span>`
                                    ).join('')}
                                    ${edificiArray.length > 2 ? `<span class="building-item">+${edificiArray.length - 2} altri</span>` : ''}
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                container.innerHTML += card;
            });
        }

        function renderAdminUniversities() {
            const container = document.getElementById('adminUniversitiesList');
            container.innerHTML = '';

            if (universities.length === 0) {
                container.innerHTML = `
                    <div class="col-12 text-center py-5">
                        <i class="fas fa-cog fa-3x text-muted mb-3"></i>
                        <h4 class="text-muted">Nessuna sede da gestire</h4>
                        <p class="text-muted">Aggiungi la prima sede universitaria cliccando sul pulsante "Aggiungi Sede".</p>
                    </div>
                `;
                return;
            }

            universities.forEach(uni => {
                const edificiArray = Array.isArray(uni.edifici) ? uni.edifici : [];
                const card = `
                    <div class="col-lg-4 col-md-6 mb-4">
                        <div class="card h-100">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <h5 class="card-title text-primary">${uni.nome}</h5>
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-outline-primary btn-sm" onclick="editUniversity(${uni.id})" title="Modifica sede">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteUniversity(${uni.id})" title="Elimina sede">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                                <p class="card-text text-muted mb-1">
                                    <i class="fas fa-map-marker-alt me-2"></i>${uni.indirizzo}
                                </p>
                                <p class="small text-muted mb-3">
                                    <i class="fas fa-globe me-2"></i>${uni.latitudine}, ${uni.longitudine}
                                </p>
                                <div class="mb-2">
                                    <strong>Edifici (${edificiArray.length}):</strong>
                                </div>
                                <div class="d-flex flex-wrap">
                                    ${edificiArray.map(edificio => 
                                        `<span class="building-item">${edificio}</span>`
                                    ).join('')}
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                container.innerHTML += card;
            });
        }

        function showUniversityDetails(id) {
            const uni = universities.find(u => u.id === id);
            if (!uni) return;

            const edificiArray = Array.isArray(uni.edifici) ? uni.edifici : [];

            document.getElementById('modalTitle').innerHTML = `
                <i class="fas fa-university me-2"></i>${uni.nome}
            `;
            
            document.getElementById('modalBody').innerHTML = `
                <div class="mb-4">
                    <h6><i class="fas fa-map-marker-alt me-2"></i>Indirizzo</h6>
                    <p class="text-muted">${uni.indirizzo}</p>
                </div>
                <div class="mb-4">
                    <h6><i class="fas fa-globe me-2"></i>Coordinate</h6>
                    <p class="text-muted">Lat: ${uni.latitudine} | Long: ${uni.longitudine}</p>
                </div>
                <div class="mb-4">
                    <h6><i class="fas fa-building me-2"></i>Edifici presenti (${edificiArray.length})</h6>
                    <div class="d-flex flex-wrap">
                        ${edificiArray.map(edificio => 
                            `<span class="building-item me-2 mb-2">${edificio}</span>`
                        ).join('')}
                    </div>
                </div>
                <div class="text-center">
                    <button class="navigate-btn" onclick="navigateToUniversity(${uni.id})">
                        <i class="fa-solid fa-route"></i> Portami lì  
                    </button>
                </div>
            `;

            new bootstrap.Modal(document.getElementById('universityModal')).show();
        }


        // Funzione per navigare alla sede
        function navigateToUniversity(id) {
            const uni = universities.find(u => u.id === id);
            if (!uni) return;

            // Chiudi il modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('universityModal'));
            modal.hide();

            // Usa il sessionStorage per passare i dati alla pagina mappa
            const navigationData = {
                destination: uni.indirizzo,
                destinationName: uni.nome,
                timestamp: Date.now()
            };
            
            sessionStorage.setItem('navigationData', JSON.stringify(navigationData));
            
            // Reindirizza alla pagina mappa (modifica il path secondo la tua struttura Rails)
            window.location.href = '<%= home_mappa_path %>';
        }

        function showAddForm() {
            document.getElementById('addForm').classList.remove('d-none');
            document.getElementById('formTitle').innerHTML = '<i class="fas fa-plus me-2"></i>Nuova Sede Universitaria';
            document.getElementById('saveBtn').innerHTML = '<i class="fas fa-save me-2"></i>Salva Sede';
            document.getElementById('universityId').value = '';
            
            // Reset edifici container
            const container = document.getElementById('edificiContainer');
            container.innerHTML = `
                <div class="input-group mb-2">
                    <input type="text" class="form-control edificio-input" placeholder="Nome edificio" required>
                    <button type="button" class="btn btn-outline-danger" onclick="removeBuilding(this)">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            `;
        }

        function editUniversity(id) {
            const uni = universities.find(u => u.id === id);
            if (!uni) return;

            // Show form
            document.getElementById('addForm').classList.remove('d-none');
            document.getElementById('formTitle').innerHTML = '<i class="fas fa-edit me-2"></i>Modifica Sede Universitaria';
            document.getElementById('saveBtn').innerHTML = '<i class="fas fa-save me-2"></i>Aggiorna Sede';
            
            // Fill form with existing data
            document.getElementById('universityId').value = id;
            document.getElementById('nomeSede').value = uni.nome;
            document.getElementById('indirizzoSede').value = uni.indirizzo;
            document.getElementById('latSede').value = uni.latitudine || '';
            document.getElementById('longSede').value = uni.longitudine || '';
            
            // Clear and rebuild edifici container
            const container = document.getElementById('edificiContainer');
            container.innerHTML = '';
            
            const edificiArray = Array.isArray(uni.edifici) ? uni.edifici : [];
            
            edificiArray.forEach(edificio => {
                const inputHtml = `
                    <div class="input-group mb-2">
                        <input type="text" class="form-control edificio-input" placeholder="Nome edificio" value="${edificio}" required>
                        <button type="button" class="btn btn-outline-danger" onclick="removeBuilding(this)">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                `;
                container.insertAdjacentHTML('beforeend', inputHtml);
            });
            
            // Ensure at least one input exists
            if (edificiArray.length === 0) {
                addBuildingInput();
            }
            
            // Scroll to form
            document.getElementById('addForm').scrollIntoView({ behavior: 'smooth' });
        }

        function hideAddForm() {
            document.getElementById('addForm').classList.add('d-none');
            document.getElementById('universityForm').reset();
            document.getElementById('universityId').value = '';

            // Reset form title and button
            document.getElementById('formTitle').innerHTML = '<i class="fas fa-plus me-2"></i>Nuova Sede Universitaria';
            document.getElementById('saveBtn').innerHTML = '<i class="fas fa-save me-2"></i>Salva Sede';

            // Reset edifici container
            const container = document.getElementById('edificiContainer');
            container.innerHTML = `
                <div class="input-group mb-2">
                    <input type="text" class="form-control edificio-input" placeholder="Nome edificio" required>
                    <button type="button" class="btn btn-outline-danger" onclick="removeBuilding(this)">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            `;
        }

        function addBuildingInput() {
            const container = document.getElementById('edificiContainer');
            const newInput = `
                <div class="input-group mb-2">
                    <input type="text" class="form-control edificio-input" placeholder="Nome edificio" required>
                    <button type="button" class="btn btn-outline-danger" onclick="removeBuilding(this)">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', newInput);
        }

        function removeBuilding(button) {
            const container = document.getElementById('edificiContainer');
            if (container.children.length > 1) {
                button.parentElement.remove();
            }
        }

        async function deleteUniversity(id) {
            if (confirm('Sei sicuro di voler eliminare questa sede universitaria?')) {
                try {
                    showLoading();
                    await deleteUniversityFromServer(id);
                    showSuccess('Sede eliminata con successo!');
                    await fetchUniversities(); // Ricarica la lista
                } catch (error) {
                    hideLoading();
                    showError('Errore nell\'eliminazione della sede: ' + error.message);
                }
            }
        }

        // Form submission
        document.getElementById('universityForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const universityId = document.getElementById('universityId').value;
            const nome = document.getElementById('nomeSede').value.trim();
            const indirizzo = document.getElementById('indirizzoSede').value.trim();
            const lat = document.getElementById('latSede').value.trim();
            const long = document.getElementById('longSede').value.trim();

            const edificiInputs = document.querySelectorAll('.edificio-input');
            const edifici = Array.from(edificiInputs)
                .map(input => input.value.trim())
                .filter(value => value !== '');

            if (!nome || !indirizzo || !lat || !long || edifici.length === 0) {
                showError('Per favore compila tutti i campi obbligatori e aggiungi almeno un edificio.');
                return;
            }

            const sedeData = {
                nome: nome,
                indirizzo: indirizzo,
                latitudine:lat,
                long: long,
                edifici: edifici
            };

            try {
                showLoading();
                
                if (universityId) {
                    // Update existing university
                    await updateUniversity(universityId, sedeData);
                    showSuccess('Sede universitaria aggiornata con successo!');
                } else {
                    // Add new university
                    await createUniversity(sedeData);
                    showSuccess('Sede universitaria aggiunta con successo!');
                }

                await fetchUniversities(); // Ricarica la lista
                hideAddForm();
                
            } catch (error) {
                hideLoading();
                showError('Errore nel salvataggio: ' + error.message);
            }
        });

        // Initialize - Carica le sedi allavvio
        document.addEventListener('DOMContentLoaded', function() {
            fetchUniversities();
        });

    </script>
</body>
</html>